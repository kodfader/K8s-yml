---
# Pod definition for Node.js app
apiVersion: v1            # The API version being used.
kind: Pod
metadata:       # Contains information about the Pod, such as its name (nodejs-app-pod) and labels (app: nodejs-app). The labels will be used by the Service to find the Pod.
  name: nodejs-app-pod
  labels:
    app: nodejs-app
spec:           # Defines the configuration of the Pod:
  containers:   # Lists the containers in the Pod. This example has a single container running Node.js (node:lts-alpine image).
  - name: nodejs-app-container
    image: node:lts-alpine
    ports:      # The container exposes port 3000, which is where the Node.js application will listen for HTTP requests.
    - containerPort: 3000
    command: ["node", "-e", "require('http').createServer((req, res) => res.end('Hello, Kubernetes')).listen(3000)"] # This command starts a basic Node.js HTTP server that returns "Hello, Kubernetes" on requests.
    livenessProbe:  # Checks if the container is alive by sending an HTTP GET request to / on port 3000 every 10 seconds, after an initial delay of 5 seconds.
      httpGet:
        path: /
        port: 3000
      initialDelaySeconds: 5
      periodSeconds: 10
    readinessProbe:  # Similar to the liveness probe, but it checks if the container is ready to receive traffic.
      httpGet:
        path: /
        port: 3000
      initialDelaySeconds: 5
      periodSeconds: 10

---
# Service definition for the Node.js app
apiVersion: v1  # The API version for the Service.
kind: Service   # Defines that the object is a Service.
metadata:       # Specifies the name of the Service (nodejs-app-service).
  name: nodejs-app-service
spec:           # Defines the Service configuration:
  selector:     # Matches Pods based on the label (app: nodejs-app). The Service will route traffic to Pods that have this label.
    app: nodejs-app
  ports:        # Specifies that the Service will listen on port 80 and route traffic to the container's port 3000.
    - protocol: TCP
      port: 80          # Expose the service on port 80
      targetPort: 3000  # Redirect to the container's port 3000
  type: ClusterIP       # Internal cluster access only (default), This means the Service will only be accessible within the Kubernetes cluster.
